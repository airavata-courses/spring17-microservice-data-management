/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.iu.order.service.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-27")
public class Orders implements org.apache.thrift.TBase<Orders, Orders._Fields>, java.io.Serializable, Cloneable, Comparable<Orders> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Orders");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderAmount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUSTOMER_FIELD_DESC = new org.apache.thrift.protocol.TField("customer", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrdersStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrdersTupleSchemeFactory();

  public int id; // required
  public int orderAmount; // required
  public String status; // required
  public Customer customer; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ORDER_AMOUNT((short)2, "orderAmount"),
    STATUS((short)3, "status"),
    CUSTOMER((short)4, "customer");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ORDER_AMOUNT
          return ORDER_AMOUNT;
        case 3: // STATUS
          return STATUS;
        case 4: // CUSTOMER
          return CUSTOMER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ORDERAMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "integer")));
    tmpMap.put(_Fields.ORDER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("orderAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "integer")));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER, new org.apache.thrift.meta_data.FieldMetaData("customer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Customer.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Orders.class, metaDataMap);
  }

  public Orders() {
  }

  public Orders(
    int id,
    int orderAmount,
    String status,
    Customer customer)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.orderAmount = orderAmount;
    setOrderAmountIsSet(true);
    this.status = status;
    this.customer = customer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Orders(Orders other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.orderAmount = other.orderAmount;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetCustomer()) {
      this.customer = new Customer(other.customer);
    }
  }

  public Orders deepCopy() {
    return new Orders(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setOrderAmountIsSet(false);
    this.orderAmount = 0;
    this.status = null;
    this.customer = null;
  }

  public int getId() {
    return this.id;
  }

  public Orders setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getOrderAmount() {
    return this.orderAmount;
  }

  public Orders setOrderAmount(int orderAmount) {
    this.orderAmount = orderAmount;
    setOrderAmountIsSet(true);
    return this;
  }

  public void unsetOrderAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID);
  }

  /** Returns true if field orderAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID);
  }

  public void setOrderAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID, value);
  }

  public String getStatus() {
    return this.status;
  }

  public Orders setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public Customer getCustomer() {
    return this.customer;
  }

  public Orders setCustomer(Customer customer) {
    this.customer = customer;
    return this;
  }

  public void unsetCustomer() {
    this.customer = null;
  }

  /** Returns true if field customer is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomer() {
    return this.customer != null;
  }

  public void setCustomerIsSet(boolean value) {
    if (!value) {
      this.customer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ORDER_AMOUNT:
      if (value == null) {
        unsetOrderAmount();
      } else {
        setOrderAmount((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case CUSTOMER:
      if (value == null) {
        unsetCustomer();
      } else {
        setCustomer((Customer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ORDER_AMOUNT:
      return getOrderAmount();

    case STATUS:
      return getStatus();

    case CUSTOMER:
      return getCustomer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ORDER_AMOUNT:
      return isSetOrderAmount();
    case STATUS:
      return isSetStatus();
    case CUSTOMER:
      return isSetCustomer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Orders)
      return this.equals((Orders)that);
    return false;
  }

  public boolean equals(Orders that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_orderAmount = true;
    boolean that_present_orderAmount = true;
    if (this_present_orderAmount || that_present_orderAmount) {
      if (!(this_present_orderAmount && that_present_orderAmount))
        return false;
      if (this.orderAmount != that.orderAmount)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_customer = true && this.isSetCustomer();
    boolean that_present_customer = true && that.isSetCustomer();
    if (this_present_customer || that_present_customer) {
      if (!(this_present_customer && that_present_customer))
        return false;
      if (!this.customer.equals(that.customer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + orderAmount;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomer()) ? 131071 : 524287);
    if (isSetCustomer())
      hashCode = hashCode * 8191 + customer.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Orders other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderAmount()).compareTo(other.isSetOrderAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderAmount, other.orderAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomer()).compareTo(other.isSetCustomer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customer, other.customer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Orders(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderAmount:");
    sb.append(this.orderAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customer:");
    if (this.customer == null) {
      sb.append("null");
    } else {
      sb.append(this.customer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'orderAmount' because it's a primitive and you chose the non-beans generator.
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (customer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'customer' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (customer != null) {
      customer.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrdersStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OrdersStandardScheme getScheme() {
      return new OrdersStandardScheme();
    }
  }

  private static class OrdersStandardScheme extends org.apache.thrift.scheme.StandardScheme<Orders> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Orders struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderAmount = iprot.readI32();
              struct.setOrderAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUSTOMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.customer = new Customer();
              struct.customer.read(iprot);
              struct.setCustomerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOrderAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderAmount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Orders struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORDER_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.orderAmount);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.customer != null) {
        oprot.writeFieldBegin(CUSTOMER_FIELD_DESC);
        struct.customer.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrdersTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OrdersTupleScheme getScheme() {
      return new OrdersTupleScheme();
    }
  }

  private static class OrdersTupleScheme extends org.apache.thrift.scheme.TupleScheme<Orders> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Orders struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.orderAmount);
      oprot.writeString(struct.status);
      struct.customer.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Orders struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.orderAmount = iprot.readI32();
      struct.setOrderAmountIsSet(true);
      struct.status = iprot.readString();
      struct.setStatusIsSet(true);
      struct.customer = new Customer();
      struct.customer.read(iprot);
      struct.setCustomerIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

